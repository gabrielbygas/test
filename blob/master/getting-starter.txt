<?php
/**
 * Please fix the items marked with "@TODO" in this class
 * 
 * Follow the https://www.php-fig.org/psr/psr-2/ coding style guide.
 * 
 * One exception to PSR-2: opening braces MUST always be on the same line 
 * for classes, methods, functions, and control structures
 */

class Singleton
{

    // @TODO Implement Singleton functionality
    private static $instance = null;

    private function __construct()
    {
        // The expensive process (e.g.,db connection) goes here.
    }

    public static function getInstance()
    {
        if (self::$instance == null) 
        {
            self::$instance = new Singleton();
        }
        return self::$instance;
    }
    /**
     * Display user name
     * 
     * @param string $name User-provided name
     */
    public function userEcho($name)
    {
        // @TODO Validate & sanitize $name
        $name = filter_var($name, FILTER_SANITIZE_STRING);
        echo "The value of 'name' is '{$name}'";
    }

    /**
     * Query by user name
     * 
     * @param string $name User-provided name
     */
    public function userQuery($name)
    {
        // @TODO Validate & sanitize $name
        $name = filter_var(htmlspecialchars($name), FILTER_SANITIZE_STRING);
        mysql_query("SELECT * FROM `test` WHERE `name` = '{$name}' LIMIT 1");
    }

    /**
     * Output the contents of a file
     * 
     * @param string $path User-provided file path
     */
    public function userFile($path)
    {
        // @TODO Validate & sanitize $path
        $path = realpath($path). PHP_EOL;
        readfile($path);
    }

    /**
     * Nested conditions
     */
    public function nestedConditions()
    {
        // @TODO Untangle nested conditions
        /*
        if ($conditionA) {
            if ($conditionB) {
                if ($conditionC) {
                    echo 'ABC';
                } else {
                    echo '^C';
                }
            } else {
                echo '^B';
            }
        } else {
            echo '^A';
        }
        */

        if($conditionA && $conditionB && $conditionC){
            echo 'ABC';
        } elseif (!$conditionC){
            echo '^C';
        } elseif(!$conditionB){
            echo '^B';
        } else{
            echo '^A';
        }

    }

    /**
     * Return statements
     * 
     * @return boolean
     */
    public function returnStatements()
    {
        // @TODO Fix
        /*
        if ($conditionA) {
            echo 'A';
            return true;
        } else {
            return false;
        }
        */
        if($conditionA){
            echo 'A';
            return true;
        }
        return false;
    }

    /**
     * Null coalescing
     */
    public function nullCoalescing()
    {
        // @TODO Simplify
        /*
        if (isset($_GET['name'])) {
            $name = $_GET['name'];
        } elseif (isset($_POST['name'])) {
            $name = $_POST['name'];
        } else {
            $name = 'nobody';
        }
        return $name;
        */
        $name = $_GET['name'] ?? $_POST['name'] ?? 'nobody';
        return $name;
    }

    /**
     * Method chaining
     */
    public function methodChained()
    {
        // @TODO Implement method chaining
        $instance = self::getInstance();
        $instance->userEcho($instance->nullCoalescing());
    }

    /**
     * Immutables are hard to find
     */
    public function checkValue($value)
    {
        $result = null;

        // @TODO Make all the immutable values (int, string) in this class 
        // easily replaceable
        switch ($value) {
            case 'stringA':
                $result = 1;
                break;

            case 'stringB':
                $result = 2;
                break;
        }

        return $result;
    }

    /**
     * Check a string is a 24 hour time
     * 
     * @example "00:00:00", "23:59:59", "20:15"
     * @return boolean
     */
    public function regexTest($time24Hour)
    {
        // @TODO Implement RegEx and return type; validate & sanitize input
        return preg_match('([01]?[0-9]|2[0-3]):[0-5][0-9]', $time24Hour);
    }
}

/*EOF*/
